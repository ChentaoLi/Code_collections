library(scCustomize)
library(dittoSeq)
library(ggplot2)
fig_name <- paste0(a, "_vln", ".png")
png(file = fig_name, res = 300, width = 1200, height = 960)
VlnPlot(PROJECTIL, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
dev.off()
}
# FindDEGs("Ripk3", MCD8T_LCMV)
FindDEGs("RIPK3", MCD8T_LCMV)
FindDEGs("RIPK3", HCD4T)
FindDEGs("RIPK3", HCD8T)
FindDEGs("RIPK3", HCD4T)
HCD4T <- readRDS(HCD4T)
HCD8T <- readRDS(HCD8T)
seurat_object <- merge(HCD4T, y= HCD8T)
GeneName <- "RIPK3"
PROJECTIL <- merge(HCD4T, y= HCD8T)
PROJECTIL_expression <- PROJECTIL@assays$RNA[GeneName, ]
PROJECTIL_GeneName_expression <- as.vector(PROJECTIL@assays$RNA[GeneName, ])
PROJECTIL@meta.data$GeneName_expression <- PROJECTIL_GeneName_expression
label_high <- paste0(GeneName, "_High")
label_low <- paste0(GeneName, "_Low")
PROJECTIL@meta.data$GeneName_label <- ifelse(PROJECTIL@meta.data$GeneName_expression > 0, label_high, label_low)
PROJECTIL_subsets <- SplitObject(PROJECTIL, split.by = "functional.cluster")
PROJECTIL_subsets_with_GeneName <- lapply(PROJECTIL_subsets, function(subset) {
SplitObject(subset, split.by = "GeneName_label")})
gene_list <- c("IFNG", "TNF", "GNLY", "GZMB", "CD69")
VlnPlot(seurat_object, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
VlnPlot(PROJECTIL, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
VlnPlot(PROJECTIL, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
PROJECTIL <- merge(HCD8T, y= HCD4T)
PROJECTIL_expression <- PROJECTIL@assays$RNA[GeneName, ]
PROJECTIL_GeneName_expression <- as.vector(PROJECTIL@assays$RNA[GeneName, ])
PROJECTIL@meta.data$GeneName_expression <- PROJECTIL_GeneName_expression
label_high <- paste0(GeneName, "_High")
label_low <- paste0(GeneName, "_Low")
PROJECTIL@meta.data$GeneName_label <- ifelse(PROJECTIL@meta.data$GeneName_expression > 0, label_high, label_low)
PROJECTIL_subsets <- SplitObject(PROJECTIL, split.by = "functional.cluster")
PROJECTIL_subsets_with_GeneName <- lapply(PROJECTIL_subsets, function(subset) {
SplitObject(subset, split.by = "GeneName_label")})
gene_list <- c("IFNG", "TNF", "GNLY", "GZMB", "CD69")
VlnPlot(PROJECTIL, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
VlnPlot(PROJECTIL, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
gene_list <- c("IFNG", "TNF", "GZMB", "GZMM", "NFKB1", "TOX")
VlnPlot(PROJECTIL, features = gene_list,
stack=T,pt.size=0,
flip = T,
add.noise = T,
split.by = 'GeneName_label',
split.plot = T)+#横纵轴不标记任何东西
theme(axis.text.y = element_blank(), #不显示坐标刻度
axis.ticks.y = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(colour = 'black',size = 10,angle = 45),
legend.position = 'top')
gene_list <- c("IFNG", "TNF", "GZMB", "GZMM", "NFKB1", "NFKBIB", "NFATC3","TOX", "TIGIT", "CD28", "SELL", "LAG3")
data_frames <- list()
gene_names_list <- list()
library(readxl)
excel_file <- "D:/OneDrive - International Campus, Zhejiang University/桌面/DEGs/T_human_ref_v1_limma_RIPK3.xlsx"
sheet_names <- excel_sheets(excel_file)
for (sheet_name in sheet_names) {
sheet_data <- read_excel(excel_file, sheet = sheet_name)
data_frames[[sheet_name]] <- sheet_data
gene_names_list[[sheet_name]] <- sheet_data$Gene
}
max_length <- max(sapply(gene_names_list, length))
filled_gene_names_list <- lapply(gene_names_list, function(x) {
if (length(x) < max_length) {
c(x, rep(NA, max_length - length(x)))
} else {
x
}
})
gene_names_df <- as.data.frame(filled_gene_names_list)
colnames(gene_names_df) <- sheet_names
# UpsetR
library(UpSetR)
gene_matrix <- matrix(0, nrow = 43, ncol = ncol(gene_names_df))
unique_genes <- unique(unlist(gene_names_df))
rownames(gene_matrix) <- unique_genes
unique_genes
excel_file <- "D:/OneDrive - International Campus, Zhejiang University/桌面/DEGs/T_human_ref_v1_limma_RIPK3.xlsx"
sheet_names <- excel_sheets(excel_file)
for (sheet_name in sheet_names) {
sheet_data <- read_excel(excel_file, sheet = sheet_name)
data_frames[[sheet_name]] <- sheet_data
gene_names_list[[sheet_name]] <- sheet_data$Gene
}
max_length <- max(sapply(gene_names_list, length))
filled_gene_names_list <- lapply(gene_names_list, function(x) {
if (length(x) < max_length) {
c(x, rep(NA, max_length - length(x)))
} else {
x
}
})
gene_names_df <- as.data.frame(filled_gene_names_list)
colnames(gene_names_df) <- sheet_names
gene_names_df
gene_list <- c("IFNG", "TNF", "GZMB", "GZMM", "NFKB1", "NFKBIB", "NFATC3","TOX", "TIGIT", "CD28", "SELL", "LAG3")
library(readxl)
library(dplyr)
library(tidyr)
excel_file <- "D:/OneDrive - International Campus, Zhejiang University/桌面/DEGs/T_human_ref_v1_limma_RIPK3.xlsx"
sheet_names <- excel_sheets(excel_file)
# Create a data frame to store results
result_df <- data.frame(Gene = gene_list)
# Loop through each sheet and count the occurrences
for (sheet_name in sheet_names) {
sheet_data <- read_excel(excel_file, sheet = sheet_name)
counts <- sapply(gene_list, function(gene) sum(sheet_data$Gene == gene))
result_df <- result_df %>% mutate(!!sheet_name := counts)
}
# Replace NA values with 0
result_df[is.na(result_df)] <- 0
# Save the result to a CSV file
write.csv(result_df, "gene_occurrences.csv", row.names = FALSE)
result_df
rownames(result_df) <- result_df$Gene
result_df$Gene <- NULL
upset_data <- upset(result_df, nset = 14, nintersects = 100,
mainbar.y.label = "Intersection Size", sets.x.label = "DEG counts",
mb.ratio = c(0.4, 0.6),
set_size.show = TRUE)
upset_data
# ProjecTIL
HCD4T <- "CD4T_human_ref_v1.rds"
HCD8T <- "CD8T_human_ref_v1.rds"
MAPC <- "APC_atlas_v1_SPICA.rds"
HDC <- "DC_human_ref_v1.rds"
MTIL <- "ref_TILAtlas_mouse_v1.rds"
MCD8T_LCMV <- "ref_CD8_LCMV_mouse_v2.rds"
MCD4T_LCMV <- "ref_LCMV_CD4_mouse_v1.rds"
MCD8T_LCMV_v1 <- "ref_CD8_LCMV_mouse_v1.rds"
FindDEGs <- function(GeneName, ProjecTIL_path){
library(Seurat)
library(SeuratObject)
library(tidyverse)
PROJECTIL <- readRDS(ProjecTIL_path)
PROJECTIL_expression <- PROJECTIL@assays$RNA[GeneName, ]
PROJECTIL_GeneName_expression <- as.vector(PROJECTIL@assays$RNA[GeneName, ])
PROJECTIL@meta.data$GeneName_expression <- PROJECTIL_GeneName_expression
label_high <- paste0(GeneName, "_High")
label_low <- paste0(GeneName, "_Low")
PROJECTIL@meta.data$GeneName_label <- ifelse(PROJECTIL@meta.data$GeneName_expression > 0, label_high, label_low)
PROJECTIL_subsets <- SplitObject(PROJECTIL, split.by = "functional.cluster")
PROJECTIL_subsets_with_GeneName <- lapply(PROJECTIL_subsets, function(subset) {
SplitObject(subset, split.by = "GeneName_label")
})
library(limma)
library(edgeR)
results_list <- list()
for (subset_name in names(PROJECTIL_subsets_with_GeneName)) {
subset_data <- PROJECTIL_subsets_with_GeneName[[subset_name]]
if (is.null(subset_data[[label_high]])) {
print(paste("Subset", subset_name, "is NULL"))
} else {
subset_expression <- cbind(as.matrix(subset_data[[label_low]]@assays[["RNA"]]@data),
as.matrix(subset_data[[label_high]]@assays[["RNA"]]@data))
subset_meta <- rbind(subset_data[[label_low]]@meta.data, subset_data[[label_high]]@meta.data)
group_list <- factor(subset_meta$GeneName_label, levels = c(label_high, label_low))
design_matrix <- model.matrix(~0 + group_list)
colnames(design_matrix) <- levels(group_list)
rownames(design_matrix) <- colnames(subset_expression)
dge <- DGEList(counts=subset_expression)
dge <- calcNormFactors(dge)
v <- voom(dge,design_matrix, normalize="quantile")
fit <- lmFit(v, design_matrix)
constrasts = paste(rev(levels(group_list)),collapse = "-")
cont.matrix <- makeContrasts(contrasts=constrasts,levels = design_matrix)
fit2=contrasts.fit(fit,cont.matrix)
fit2=eBayes(fit2)
DEG = topTable(fit2, coef=constrasts, n=Inf)
logFC_cutoff <- with(DEG,mean(abs(logFC)) + 2*sd(abs(logFC)) )
DEG = na.omit(DEG)
logFC_cutoff <- 0.5
k1 = (DEG$P.Value < 0.05)&(DEG$logFC < -logFC_cutoff)
k2 = (DEG$P.Value < 0.05)&(DEG$logFC > logFC_cutoff)
DEG$change = ifelse(k1,"DOWN",ifelse(k2,"UP","NOT"))
results <- DEG[!DEG$change == "NOT", ]
results_list[[subset_name]] <- results
}
}
library(openxlsx)
wb <- createWorkbook()
df_names <- names(results_list)
for (i in seq_along(results_list)) {
df <- results_list[i][[1]]
df$Gene <- rownames(df)
df <- df[!is.na(df$logFC) & !is.na(df$P.Value) & abs(df$logFC) > 0.5 & df$P.Value < 0.05, ]
sheet_name <- df_names[i]
addWorksheet(wb, sheetName = sheet_name)
df_new = as.data.frame(df)
writeDataTable(wb, sheet = i, x = df_new, colNames = TRUE, rowNames = TRUE)
}
a <- gsub(pattern = "", replacement = "", x = ProjecTIL_path)
b <- gsub(pattern = ".rds", replacement = "", x = a)
filename <- paste0(b, "_limma_", GeneName, ".xlsx")
saveWorkbook(wb, filename)
library(readxl)
library(UpSetR)
data_frames <- list()
gene_names_list <- list()
sheet_names <- excel_sheets(filename)
for (sheet_name in sheet_names) {
sheet_data <- read_excel(filename, sheet = sheet_name)
data_frames[[sheet_name]] <- sheet_data
gene_names_list[[sheet_name]] <- sheet_data$Gene
}
max_length <- max(sapply(gene_names_list, length))
filled_gene_names_list <- lapply(gene_names_list, function(x) {
if (length(x) < max_length) {
c(x, rep(NA, max_length - length(x)))
} else {
x
}
})
gene_names_df <- as.data.frame(filled_gene_names_list)
colnames(gene_names_df) <- sheet_names
unique_genes <- unique(unlist(gene_names_df))
gene_matrix <- matrix(0, nrow = length(unique_genes), ncol = ncol(gene_names_df))
rownames(gene_matrix) <- unique_genes
colnames(gene_matrix) <- colnames(gene_names_df)
for (i in 1:nrow(gene_matrix)) {
for (j in 1:ncol(gene_matrix)) {
if (rownames(gene_matrix)[i] %in% gene_names_df[, j]) {
gene_matrix[i, j] <- 1
}
}
}
gene_matrix <- gene_matrix[rowSums(gene_matrix) > 2, ]
gene_matrix <- gene_matrix[!is.na(rownames(gene_matrix)), ]
a <- gsub(pattern = ".xlsx", replacement = "", x = filename)
filename2 <- paste0(a, "_UpsetR", ".csv")
write.csv(gene_matrix, filename2)
gene_matrix <- as.data.frame(gene_matrix)
fig_name <- paste0(a, "_UpsetR", ".png")
upset_data <- upset(gene_matrix, nset = 20, nintersects = 100,
mainbar.y.label = "Intersection Size", sets.x.label = "DEG counts",
mb.ratio = c(0.4, 0.6),
set_size.show = TRUE)
upset_data
png(file = fig_name, res = 300, width = 1200, height = 960)
print(upset_data)
dev.off()
}
# FindDEGs("Ripk3", MCD8T_LCMV)
GeneName <- "Ripk3"
ProjecTIL_path <- MCD8T_LCMV
library(Seurat)
library(SeuratObject)
library(tidyverse)
PROJECTIL <- readRDS(ProjecTIL_path)
PROJECTIL_expression <- PROJECTIL@assays$RNA[GeneName, ]
PROJECTIL_GeneName_expression <- as.vector(PROJECTIL@assays$RNA[GeneName, ])
PROJECTIL@meta.data$GeneName_expression <- PROJECTIL_GeneName_expression
label_high <- paste0(GeneName, "_High")
label_low <- paste0(GeneName, "_Low")
PROJECTIL@meta.data$GeneName_label <- ifelse(PROJECTIL@meta.data$GeneName_expression > 0, label_high, label_low)
PROJECTIL_subsets <- SplitObject(PROJECTIL, split.by = "functional.cluster")
PROJECTIL_subsets_with_GeneName <- lapply(PROJECTIL_subsets, function(subset) {
SplitObject(subset, split.by = "GeneName_label")
})
Vln <- function(data, gene_list, group, split){
source("singlecell_gene_test.R")
A <- singlecell_gene_test(data,
genes.use = gene_list,
group.by = group,
comp = split)
anno_pvalue <- format(A$p_val, scientific = T,digits = 3)
anno_sig <- A$sig
plots_violins <- VlnPlot(data,
cols = c("limegreen", "navy"),
pt.size = 0,
group.by = "orig.ident",
features = gene_list,
ncol = 3,
log = FALSE,
combine = FALSE)+
geom_boxplot(width=.2, col="black",fill="white")
for(i in 1:length(plots_violins)) {
data <- plots_violins[[i]]$data
colnames(data)[1] <- 'gene'
plots_violins[[i]] <- plots_violins[[i]] +
theme_classic() +
theme(axis.text.x = element_text(size = 10,color="black"),
axis.text.y = element_text(size = 10,color="black"),
axis.title.y= element_text(size=12,color="black"),
axis.title.x = element_blank(),
legend.position='none')+
scale_y_continuous(expand = expansion(mult = c(0.05, 0.1)))+
scale_x_discrete(labels = c("Female","Male"))+
geom_signif(annotations = anno_sig[i],
y_position = max(data$gene)+0.5,
xmin = 1,
xmax = 2,
tip_length = 0)
}
CombinePlots(plots_violins)
}
Vln(PROJECTIL, c("Ripk3", "Gzmb", "Tox"), "functional.cluster", GeneName_label)
Vln <- function(data, gene_list, group, split){
source("singlecell_gene_test.R")
A <- singlecell_gene_test(data,
genes.use = gene_list,
group.by = group,
comp = split)
anno_pvalue <- format(A$p_val, scientific = T,digits = 3)
anno_sig <- A$sig
plots_violins <- VlnPlot(data,
cols = c("limegreen", "navy"),
pt.size = 0,
group.by = "orig.ident",
features = gene_list,
ncol = 3,
log = FALSE,
combine = FALSE)+
geom_boxplot(width=.2, col="black",fill="white")
for(i in 1:length(plots_violins)) {
data <- plots_violins[[i]]$data
colnames(data)[1] <- 'gene'
plots_violins[[i]] <- plots_violins[[i]] +
theme_classic() +
theme(axis.text.x = element_text(size = 10,color="black"),
axis.text.y = element_text(size = 10,color="black"),
axis.title.y= element_text(size=12,color="black"),
axis.title.x = element_blank(),
legend.position='none')+
scale_y_continuous(expand = expansion(mult = c(0.05, 0.1)))+
scale_x_discrete(labels = c("Female","Male"))+
geom_signif(annotations = anno_sig[i],
y_position = max(data$gene)+0.5,
xmin = 1,
xmax = 2,
tip_length = 0)
}
CombinePlots(plots_violins)
}
Vln(PROJECTIL, c("Ripk3", "Gzmb", "Tox"), "functional.cluster", GeneName_label)
source(singlecell_gene_test.R)
source("../Code_collections/Visualize/singlecell_gene_test.R")
source("D:/OneDrive - International Campus, Zhejiang University/Dry_Lab/Code_collections/Visualize/singlecell_gene_test.R")
Vln(PROJECTIL, c("Ripk3", "Gzmb", "Tox"), "functional.cluster", GeneName_label)
# source("../Code_collections/Visualize/singlecell_gene_test.R")
source("D:/OneDrive - International Campus, Zhejiang University/Dry_Lab/Code_collections/Visualize/singlecell_gene_test.R")
Vln <- function(data, gene_list, group, split){
# source("../Code_collections/Visualize/singlecell_gene_test.R")
source("D:/OneDrive - International Campus, Zhejiang University/Dry_Lab/Code_collections/Visualize/singlecell_gene_test.R")
A <- singlecell_gene_test(data,
genes.use = gene_list,
group.by = group,
comp = split)
anno_pvalue <- format(A$p_val, scientific = T,digits = 3)
anno_sig <- A$sig
plots_violins <- VlnPlot(data,
cols = c("limegreen", "navy"),
pt.size = 0,
group.by = "orig.ident",
features = gene_list,
ncol = 3,
log = FALSE,
combine = FALSE)+
geom_boxplot(width=.2, col="black",fill="white")
for(i in 1:length(plots_violins)) {
data <- plots_violins[[i]]$data
colnames(data)[1] <- 'gene'
plots_violins[[i]] <- plots_violins[[i]] +
theme_classic() +
theme(axis.text.x = element_text(size = 10,color="black"),
axis.text.y = element_text(size = 10,color="black"),
axis.title.y= element_text(size=12,color="black"),
axis.title.x = element_blank(),
legend.position='none')+
scale_y_continuous(expand = expansion(mult = c(0.05, 0.1)))+
scale_x_discrete(labels = c("Female","Male"))+
geom_signif(annotations = anno_sig[i],
y_position = max(data$gene)+0.5,
xmin = 1,
xmax = 2,
tip_length = 0)
}
CombinePlots(plots_violins)
}
Vln(PROJECTIL, c("Ripk3", "Gzmb", "Tox"), "functional.cluster", GeneName_label)
Vln(PROJECTIL, c("Ripk3", "Gzmb", "Tox"), "functional.cluster", "GeneName_label")
A <- singlecell_gene_test(data,
genes.use = gene_list,
group.by = group,
comp = split)
Vln(PROJECTIL, c("Ripk3", "Gzmb", "Tox"), "functional.cluster", "GeneName_label")
data <- PROJECTIL
gene_list <- c("Ripk3", "Gzmb", "Tox")
group<- "functional.cluster"
split <- "GeneName_label"
A <- singlecell_gene_test(data,
genes.use = gene_list,
group.by = group,
comp = split)
SerautObj <- PROJECTIL
genes.use <- c("Ripk3", "Gzmb", "Tox")
group<- "functional.cluster"
split <- "GeneName_label"
p_val.out <- c()
stat.out <- c()
condition.out <- c()
gene.out <- c()
if (only_postive == F){
for (gene in genes.use){
group1_cellname = rownames(SerautObj@meta.data[SerautObj@meta.data[[group.by]] == comp[1],])
group1_exp = SerautObj@assays[[assay]]@data[gene, group1_cellname]
group2_cellname = rownames(SerautObj@meta.data[SerautObj@meta.data[[group.by]] == comp[2],])
group2_exp = SerautObj@assays[[assay]]@data[gene, group2_cellname]
t_out = t.test(group1_exp, group2_exp)
cond = paste(comp[1], comp[2], sep = "_")
condition.out <- c(condition.out, cond)
stat.out <- c(stat.out, t_out[["statistic"]])
p_val.out <- c(p_val.out, t_out[["p.value"]])
gene.out <- c(gene.out, gene)
}
}
genes.use,
genes.use
group.by=NULL
assay = "RNA"
group.by<- "functional.cluster"
comp <- "GeneName_label"
alpha_start = .05
Bonferroni = T
only_postive =F
p_val.out <- c()
stat.out <- c()
condition.out <- c()
gene.out <- c()
if (only_postive == F){
for (gene in genes.use){
group1_cellname = rownames(SerautObj@meta.data[SerautObj@meta.data[[group.by]] == comp[1],])
group1_exp = SerautObj@assays[[assay]]@data[gene, group1_cellname]
group2_cellname = rownames(SerautObj@meta.data[SerautObj@meta.data[[group.by]] == comp[2],])
group2_exp = SerautObj@assays[[assay]]@data[gene, group2_cellname]
t_out = t.test(group1_exp, group2_exp)
cond = paste(comp[1], comp[2], sep = "_")
condition.out <- c(condition.out, cond)
stat.out <- c(stat.out, t_out[["statistic"]])
p_val.out <- c(p_val.out, t_out[["p.value"]])
gene.out <- c(gene.out, gene)
}
}
group1_cellname
SerautObj@meta.data[SerautObj@meta.data[[group.by]]
]
